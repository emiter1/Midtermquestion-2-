
#include "main.h"


void Config(void)
{
	RCC->CR |= 0x00030000;
	while(!(RCC->CR & 0x00020000));
	RCC->CR |= 0x00080000;
	RCC->PLLCFGR |= 0x00400000;
	RCC->PLLCFGR |= 0x00000004;
	RCC->PLLCFGR |= 0x00005A00;
	RCC->PLLCFGR |= 0x00000000;
	RCC->CFGR |= 0x00000000;
	RCC->CFGR |= 0x00080000;
	RCC->CFGR |= 0x00001400;
	RCC->CIR |= 0x00800000;


}
void init_leds()
{
	RCC->AHB1ENR = 0x00000008;

		GPIOD->MODER = 0x40000000;
		GPIOD->OTYPER = 0x00000000;
		GPIOD->OSPEEDR = 0xFF000000;
		GPIOD->PUPDR = 0x00000000;
}
void turn_name_on()
{
	GPIOD->ODR |= 0x0000F000;
}
void turn_surname_on()
{
	GPIOD->ODR |= 0x0000F000;
}
void turn_name_off()
{
	GPIOD->ODR &=~ 0x0000F000;
}
void turn_surname_off()
{
	GPIOD->ODR &=~ 0x0000F000;
}
void gecikme(uint32_t time)
{
	while(time--);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{


  Config();
  init_leds();

  while (1)
  {

	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_name_on();
	  gecikme(1000000);
	  turn_name_off();
	  gecikme(1000000);
	  turn_surname_on();
	  gecikme(1000000);
	  turn_surname_off();
	  gecikme(1000000);
	  turn_surname_on();
	  gecikme(1000000);
	  turn_surname_off();
	  gecikme(1000000);
	  turn_surname_on();
	  gecikme(1000000);
	  turn_surname_off();
	  gecikme(3000000);

  }

}


void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

